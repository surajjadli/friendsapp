{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","mobile","className","src","alt","CardList","friends","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","reponse","json","users","filterFriends","filter","friend","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAceA,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OACpB,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,yCAAyCC,IAAI,YACtD,6BACA,4BAAKJ,GACL,2BAAIC,MCYSI,EAjBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACC,6BAEAA,EAAQC,KAAI,SAACC,EAAKC,GAClB,OACA,kBAAC,EAAD,CACCC,IAAKD,EACLT,KAAMM,EAAQG,GAAGT,KAChBC,OAAQK,EAAQG,GAAGR,cCGRU,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,6BACA,2BACCV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAEI,EAPA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,gBAAgBC,OAAO,UAC/DJ,EAAMK,WCgBMC,E,YAlBd,WAAYN,GAAQ,IAAD,8BAClB,4CAAMA,KACAO,MAAQ,CACZC,UAAU,GAHM,E,+EAMDC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACN,yDAEDG,KAAKX,MAAMK,a,GAdMQ,aC6CVC,G,kBAtCd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACf,EAAKJ,SAAS,CAAEK,YAAYD,EAAME,OAAOC,SAb3C,EAAKZ,MAAQ,CACZlB,QAAS,GACT4B,YAAc,IAJF,E,iFAQQ,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAACvB,QAASmC,S,+BAMjC,IAAD,EACyBb,KAAKJ,MAA7BlB,EADD,EACCA,QAAS4B,EADV,EACUA,YACVQ,EAAgBpC,EAAQqC,QAAO,SAAAC,GACnC,OAAOA,EAAO5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAExD,OAAQvC,EAAQyC,OAGhB,yBAAK7C,UAAU,MACf,wBAAIA,UAAU,MAAd,WACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,QAASoC,OAPlB,2C,GAxBaZ,cCIAkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.96bd1a90.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, mobile}) => {\r\n return(\r\n \t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n \t<img src='https://robohash.org/test?size=200x200' alt=\"robopic\" />\r\n \t<div>\r\n \t<h2>{name}</h2>\r\n \t<p>{mobile}</p>\r\n \t</div>\r\n \t</div >\r\n \t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport  Card from './Card';\r\n\r\nconst CardList = ({friends}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\tfriends.map((user,i) => {\r\n\t\treturn (\r\n\t\t<Card\r\n\t\t key={i} \r\n\t\t name={friends[i].name}\r\n\t\t  mobile={friends[i].mobile}/>\r\n\t    );\r\n\t\t})\r\n\t    }\r\n\t\t</div>\r\n\t\t);\r\n} \r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t<input\r\n\t\t className=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t type=\"search\" \r\n\t\t placeholder=\"search friend\"\r\n\t\t onChange={searchChange}\r\n\t\t />\r\n\t\t </div>    \r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border:'5px solid red',height:'500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\tthis.state = {\r\n\t\t\t\thasError: false\r\n\t\t\t}\r\n\t\t}\t\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\t\trender() {\r\n\t\t\tif(this.state.hasError) {\r\n\t\t\t\treturn <h1>oops something went worng</h1>\r\n\t\t\t}\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n\r\n\r\nexport default ErrorBoundry;","  import React, {Component} from 'react';\r\n  import CardList from\t'../components/CardList';\r\n  import SearchBox from\t'../components/SearchBox';\r\n  import {friends} from '../components/friends';\r\n  import Scroll from '../components/Scroll';\r\n  import ErrorBoundry from '../components/ErrorBoundry';\r\n  import './App.css';\r\n\r\n  class App extends Component{\r\n  \tconstructor() {\r\n  \t\tsuper()\r\n  \t\tthis.state = {\r\n  \t\t\tfriends: [],\r\n  \t\t\tsearchfield:  ''\r\n  \t\t}\r\n  \t}\r\n\r\n    componentDidMount() {\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(reponse => reponse.json())\r\n      .then(users => {this.setState({friends: users})})\r\n    }\r\n\r\n  \tonSearchChange = (event) => {\r\n      this.setState({ searchfield:event.target.value })\r\n  \t}\r\n  \trender() {\r\n      const {friends, searchfield} = this.state;\r\n      const filterFriends = friends.filter(friend =>{\r\n        return friend.name.toLowerCase().includes(searchfield.toLowerCase());\r\n      })\r\n      return !friends.length ?\r\n       <h1> Hello </h1> :\r\n       (\r\n      <div className=\"tc\">\r\n      <h1 className=\"f1\">Friends</h1>\r\n      <SearchBox searchChange={this.onSearchChange}/>\r\n      <Scroll>\r\n      <ErrorBoundry>\r\n      <CardList friends={filterFriends}/>\r\n      </ErrorBoundry>\r\n      </Scroll>\r\n      </div>\r\n      );\r\n  \t}\r\n  }\r\n\r\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}